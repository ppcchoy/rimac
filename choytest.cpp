/** The "Choytest.cpp" program has been developed for the "Rimac Routing Proyect" by M.Eng Jose Luis Calderon Choy.
* 
* This program calculates vehicle's speed in a street.
* The aplication is based on the "objectTrackingTutorial.cpp" code written by Kyle Hounslow 2013
* https://raw.githubusercontent.com/kylehounslow/opencv-tuts/master/object-tracking-tut/objectTrackingTut.cpp
* the "multipleObjectTracking.cpp" code written by Ahmad Adnan Kaifi
* https://github.com/akaifi/MultiObjectTrackingBasedOnColor
* and the Background subtraction tutorial sample code written by Domenico D. Bloisi
* http://docs.opencv.org/3.0-beta/doc/tutorials/video/background_subtraction/background_subtraction.html#background-subtraction
*
* 
* 
 */


//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include <opencv2/core/utility.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>
#include <string>
#include <fstream>
#include <ctime>
#include <sys/time.h>
#include <math.h>

using namespace cv;
using namespace std;

//initial min and max HSV filter values.
//these will be changed using trackbars
int H_MIN = 0;
int H_MAX = 256;
int S_MIN = 0;
int S_MAX = 256;
int V_MIN = 0;
int V_MAX = 256;
const string trackbarWindowName = "Trackbars";

//default capture width and height
const int FRAME_WIDTH = 640;
const int FRAME_HEIGHT = 480;
//max number of objects to be detected in frame
const int MAX_NUM_OBJECTS=50;
//minimum and maximum object area
const int MIN_OBJECT_AREA = 60*60;
const int MAX_OBJECT_AREA = FRAME_HEIGHT*FRAME_WIDTH/1.5;


// Global variables
Mat mainframe; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Mat HSV; //matrix storage for HSV image
Mat LastFinal; //matrix storage for binary Final image
Mat Final; //matrix storage for binary Final image
Mat Flow; //matrix storage for binary Flow image
	
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard

/** Function Headers */
void help();

void help()
{
    cout
    << "--------------------------------------------------------------------------" << endl
    << "This program shows how to use background subtraction methods provided by "  << endl
    << " OpenCV. You can process both videos (-vid) and images (-img)."             << endl
                                                                                    << endl
    << "Usage:"                                                                     << endl
    << "./bs {-vid <video filename>|-img <image filename>}"                         << endl
    << "for example: ./bs -vid video.avi"                                           << endl
    << "or: ./bs -img /data/images/1.png"                                           << endl
    << "--------------------------------------------------------------------------" << endl
    << endl;
}

void on_trackbar( int, void* )
{//This function gets called whenever a
	// trackbar position is changed





}
string intToString(int number){


	std::stringstream ss;
	ss << number;
	return ss.str();
}
void createTrackbars(){
	//create window for trackbars


    namedWindow(trackbarWindowName,0);
	//create memory to store trackbar name on window
	char TrackbarName[50];
	sprintf(TrackbarName, "H_MIN", H_MIN);
	sprintf(TrackbarName, "H_MAX", H_MAX);
	sprintf(TrackbarName, "S_MIN", S_MIN);
	sprintf(TrackbarName, "S_MAX", S_MAX);
	sprintf(TrackbarName, "V_MIN", V_MIN);
	sprintf(TrackbarName, "V_MAX", V_MAX);
	//create trackbars and insert them into window
	//3 parameters are: the address of the variable that is changing when the trackbar is moved(eg.H_LOW),
	//the max value the trackbar can move (eg. H_HIGH), 
	//and the function that is called whenever the trackbar is moved(eg. on_trackbar)
	//                                  ---->    ---->     ---->      
    createTrackbar( "H_MIN", trackbarWindowName, &H_MIN, H_MAX, on_trackbar );
    createTrackbar( "H_MAX", trackbarWindowName, &H_MAX, H_MAX, on_trackbar );
    createTrackbar( "S_MIN", trackbarWindowName, &S_MIN, S_MAX, on_trackbar );
    createTrackbar( "S_MAX", trackbarWindowName, &S_MAX, S_MAX, on_trackbar );
    createTrackbar( "V_MIN", trackbarWindowName, &V_MIN, V_MAX, on_trackbar );
    createTrackbar( "V_MAX", trackbarWindowName, &V_MAX, V_MAX, on_trackbar );


}
void drawObject(int x, int y,Mat &frame){

	//use some of the openCV drawing functions to draw crosshairs
	//on your tracked image!

    //UPDATE:JUNE 18TH, 2013
    //added 'if' and 'else' statements to prevent
    //memory errors from writing off the screen (ie. (-25,-25) is not within the window!)

	circle(frame,Point(x,y),20,Scalar(0,255,0),2);
    if(y-25>0)
    line(frame,Point(x,y),Point(x,y-25),Scalar(0,255,0),2);
    else line(frame,Point(x,y),Point(x,0),Scalar(0,255,0),2);
    if(y+25<FRAME_HEIGHT)
    line(frame,Point(x,y),Point(x,y+25),Scalar(0,255,0),2);
    else line(frame,Point(x,y),Point(x,FRAME_HEIGHT),Scalar(0,255,0),2);
    if(x-25>0)
    line(frame,Point(x,y),Point(x-25,y),Scalar(0,255,0),2);
    else line(frame,Point(x,y),Point(0,y),Scalar(0,255,0),2);
    if(x+25<FRAME_WIDTH)
    line(frame,Point(x,y),Point(x+25,y),Scalar(0,255,0),2);
    else line(frame,Point(x,y),Point(FRAME_WIDTH,y),Scalar(0,255,0),2);

	putText(frame,intToString(x)+","+intToString(y),Point(x,y+30),1,1,Scalar(0,255,0),2);

}



void morphOps(Mat &thresh){

	//create structuring element that will be used to "dilate" and "erode" image.
	//the element chosen here is a 3px by 3px rectangle

	Mat erodeElement = getStructuringElement( MORPH_RECT,Size(3,3));
    //dilate with larger element so make sure object is nicely visible
	Mat dilateElement = getStructuringElement( MORPH_RECT,Size(8,8));

	erode(thresh,thresh,erodeElement);
	erode(thresh,thresh,erodeElement);


	dilate(thresh,thresh,dilateElement);
	dilate(thresh,thresh,dilateElement);
	


}

//void trackFilteredObject(int &x, int &y, Mat Final, Mat LastFinal, Mat &mainframe, long int Lastms, long int ms, char* dt){
void trackFilteredObject(int &x, int &y, Mat Final, Mat LastFinal, Mat &mainframe, long int Lastms, long int ms, const char* dt2){
//obtain blobs from Final Image
	Mat temp;
	Final.copyTo(temp);
	//these two vectors needed for output of findContours
	vector< vector<Point> > contours;
	vector<Vec4i> hierarchy;
	//find contours of filtered image using openCV findContours function
	findContours(temp,contours,hierarchy,CV_RETR_CCOMP,CV_CHAIN_APPROX_SIMPLE );
	//use moments method to find our filtered object
	//double refArea = 0;
	int MatrixC [15][2]; // Current container Matrix declaration
	bool objectFound = false;
	
//obtain blobs from LastFinal Image      
	LastFinal.copyTo(temp);
	//these two vectors needed for output of findContours
	vector< vector<Point> > contoursLast;
	vector<Vec4i> hierarchyLast;
	// Setting to 0 the Data container Matrix	
	int MatrixP [15][2]; // Previous container Matrix declaration
	
	//find contours of filtered image using openCV findContours function
	findContours(temp,contoursLast,hierarchyLast,CV_RETR_CCOMP,CV_CHAIN_APPROX_SIMPLE );
	//use moments method to find our filtered object
	long int Difms = ms - Lastms;	
	
	
if (hierarchy.size() > 0 && hierarchyLast.size() > 0) {
		int numObjects = hierarchy.size();
        	int numObjectsLast = hierarchyLast.size();
        	//if number of objects greater than MAX_NUM_OBJECTS we have a noisy filter
		int j=0;
		int k=0;
		if(numObjects<MAX_NUM_OBJECTS){
				// Get Blob's position in the LastFinal frame 
				for (int index = 0; index >= 0; index = hierarchyLast[index][0]) {
				
				Moments moment = moments((cv::Mat)contoursLast[index]);
				double area = moment.m00;
				
				//if the area is less than 20 px by 20px then it is probably just noise
				//if the area is the same as the 3/2 of the image size, probably just a bad filter
				//we only want the object with the largest area so we safe a reference area each
				//iteration and compare it to the area in the next iteration.
 	               // if(area>MIN_OBJECT_AREA && area<MAX_OBJECT_AREA && area>refArea)

			if(area>MIN_OBJECT_AREA){
					x = moment.m10/area;
					MatrixP[j][0] = x;
					y = moment.m01/area;
					MatrixP[j][1] = y;
					objectFound = true;
					//cout << "xPF["<< index <<"]:" << x << "; yPF["<< index <<"]:" << y << " // ";
					j = j + 1;
					//drawObject(x,y,mainframe);
					
					
					// refArea = area;
				}else objectFound = false;

			}			
								
				for (int index = 0; index >= 0; index = hierarchy[index][0]) {
			
				Moments moment = moments((cv::Mat)contours[index]);
				double area = moment.m00;
				
			if(area>MIN_OBJECT_AREA){
					x = moment.m10/area;
					MatrixC[k][0] = x;
					y = moment.m01/area;
					MatrixC[k][1] = y;
					//cout << "xCF["<< index <<"]:" << x << "; yCF["<< index <<"]:" << y <<  " // "; 
					objectFound = true;
					//cout << "J: " << j << endl;
					k = k + 1;
					//drawObject(x,y,mainframe);				
					// cout << "ms: " << ms << ", Lastms: " << Lastms << ", Diftime: " << Difms << endl; //show timestamps and deltas.
					// refArea = area;
				}else objectFound = false;


			}
			if (j>0 && k>0 && j==k){
				//cout << endl;
				//cout << "K: " << k << endl;
				for (int w = 0; w < j; w++){
					x = MatrixC[w][0];
					y = MatrixC[w][1];
					//cout << "W: " << w << endl;
					double Vx = x - MatrixP[w][0]; // X position difference
					double Vy = y - MatrixP[w][1]; // Y position difference
					Vx = Vx*Vx; // Vx2
					Vy = Vy*Vy; // Vy2
					double v = sqrt(Vx+Vy)/Difms; //speed [bits/ms]
					double e = 920/383; // way Scale [centimeter/pixels] 
					v = v * 36 * e; // speed [Km/h]
					
					if (x>123 && x<506){ //sensing Line 123,303  506,303
					drawObject(x,y,mainframe);
					if (y>303 && MatrixP[w][1]<=303){ 
					//**************** Create File *********************************
					
					std::ofstream outputFile;
					outputFile.open("program3data.csv", std::ios_base::app);
					outputFile << "873564,"<< v << "," << dt2 << endl; // write in file;
					outputFile.close();					
					// reference: http://stackoverflow.com/questions/4186547/c-write-to-an-existing-file
					//*************************************************************** 
					cout << "873564,"<< v << "," << dt2 << endl; // << endl; write in console
					}
					}

				}
			//cout << ", Diftime: " << Difms <<  " // " << endl; //show time between frames
			}
			//let user know you found an object
			//if(objectFound ==true){
			//	putText(mainframe,"Tracking Object",Point(0,50),2,1,Scalar(0,255,0),2);
			//	putText(mainframe,"Num Object: "+intToString(numObjects),Point(0,100),2,1,Scalar(0,255,0),2);
				//draw object location on screen
				
			//	drawObject(x,y,mainframe);}

		}// else putText(mainframe,"TOO MUCH NOISE! ADJUST FILTER",Point(0,50),1,2,Scalar(0,0,255),2);
	}
	
	
}

int main(int argc, char* argv[])
{
	//some boolean variables for different functionality within this
	//program
	bool trackObjects = true;
	bool useMorphOps = true;
	//create Background Subtractor objects
    	pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
	//create slider bars for HSV filtering
	//createTrackbars();
// ***** WEBCAM CAPTURE *****************************************************************
	
 		
	VideoCapture capture; //video capture object to acquire webcam feed
	capture.open(0); //open capture object at location zero (default location for webcam)


// ***** VIDEO CAPTURE ******************************************************************


//	VideoCapture capture("universitaria.MOV");
//   	if(!capture.isOpened()){        //error in opening the video input
//        cerr << "Unable to open video file: " << "universitaria.MOV" << endl;
//        exit(EXIT_FAILURE);
//    	}


// **************************************************************************************

	//set height and width of capture frame
	//start an infinite loop where webcam feed is copied to cameraFeed matrix
	//all of our operations will be performed within this loop
	capture.set(CV_CAP_PROP_FRAME_WIDTH,FRAME_WIDTH);
	capture.set(CV_CAP_PROP_FRAME_HEIGHT,FRAME_HEIGHT);
	
	//x and y values for the location of the object
	int x=0, y=0;
	capture.read(LastFinal);
	
	pMOG2->apply(LastFinal, fgMaskMOG2);
	inRange(fgMaskMOG2,Scalar(248,0,0),Scalar(256,256,256),LastFinal);
	morphOps(LastFinal);
	
	struct timeval tp;
	gettimeofday(&tp, NULL);
	long int Lastms = tp.tv_sec * 1000 + tp.tv_usec / 1000;
		

while((char)keyboard != 'q' && (char)keyboard != 27){
			
	capture.read(mainframe); //store image to matrix
	
	//get timestamp in milliseconds.
	struct timeval tp;
	gettimeofday(&tp, NULL);
	long int ms = tp.tv_sec * 1000 + tp.tv_usec / 1000;
	// cout << "ms: " << ms << endl;
	
        pMOG2->apply(mainframe, fgMaskMOG2); //update the background model
	
        		//filter fgMaskMOG2 image between values and store filtered image to
			//Final matrix
	
        line(mainframe,Point(123,303),Point(506,303),Scalar(255,0,0),2); // data saving line       
	
	// Scalar(248,0,0),Scalar(256,256,256)
	//inRange(fgMaskMOG2,Scalar(H_MIN,S_MIN,V_MIN),Scalar(H_MAX,S_MAX,V_MAX),Final); // shadow calibration
	inRange(fgMaskMOG2,Scalar(248,0,0),Scalar(256,256,256),Final); //No shadows - fixed value
		
	//perform morphological operations on thresholded image to eliminate noise
	//and emphasize the filtered object(s)
	if(useMorphOps)
		morphOps(Final);
	
	//pass in thresholded frame to our object tracking function
	//this function will return the x and y coordinates of the
	//filtered object
	
//*********** write timestamp on mainframe ******************************************************
	
	//get timestamp	
	// current date/time based on current system
   	time_t now = time(0);

   	// convert now to string form
   	char* dt = ctime(&now); 	

	//cout << "The local date and time is: " << dt << endl;
	

   	//tm *gmtm = gmtime(&now); //convert now to tm struct for UTC
	tm *gmtm = localtime(&now); 
   	dt = asctime(gmtm);
   	//cout << "The UTC date and time is:"<< dt << endl;
	rectangle(mainframe, cv::Point(10, 2), cv::Point(250,20), cv::Scalar(255,255,255), -1); //rectangulo blanco en la esquina izquierda
	putText(mainframe, dt, cv::Point(15, 15), FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
	
	
	//timestamp en csv año,mes,dia,hora,minuto,segundo
	tm *ltm= localtime(&now);
	ostringstream dt1;
	dt1 << 1900+ltm->tm_year<<","<<1+ltm->tm_mon<<","<<ltm->tm_mday<<","<<ltm->tm_hour<<","<<ltm->tm_min<<","<<ltm->tm_sec;
	
	const char* dt2 = dt1.str().c_str(); //convierte el "string" en "const char*"
	string dt3 = dt1.str(); 
	//cout << dt1.str() << endl;
	//cout << dt3 << endl;
	//cout<<1900+ltm->tm_year<<","<<1+ltm->tm_mon<<","<<ltm->tm_mday<<","<<ltm->tm_hour<<","<<ltm->tm_min<<","<<ltm->tm_sec <<endl;
	// http://www.tutorialspoint.com/cplusplus/pdf/cpp_date_time.pdf  

//*************************************************************************************************
	if(trackObjects)
		trackFilteredObject(x,y,Final,LastFinal,mainframe,Lastms,ms,dt2);
       
	Final.copyTo(LastFinal);
	Lastms = ms;	
	//imshow("LastFinal", LastFinal);
	//imshow("background bye", fgMaskMOG2);
        //imshow("Frame", mainframe); //show the current frame and the fg masks
	//imshow("FG Mask MOG 2 - No Shadow 2", Final); //imshow("FG Mask MOG 2", fgMaskMOG2);
        waitKey( 30 ); //get the input from the keyboard (standar = 30)
		

	
	}


}
